module stuff where

data Unit = tt

Path (A : U) (a0 a1 : A) : U = PathP (<i> A) a0 a1

Rel (A : U) : U = A -> A -> U

FunPath (A B : U) : Rel (A -> B) = Path (A -> B)

PointwisePath (A B : U) : Rel (A -> B) =
  \(f g : A -> B) -> (x : A) -> Path B (f x) (g x)


{- proof (A B : U) : Path (Rel (A -> B)) (FunPath A B) (PointwisePath A B) =
 <i> PointwisePath A B -}



-- univalence stuff

-- functions
isContr (A : U) : U = (x : A) * ((y : A) -> Path A x y)
fiber (A B : U) (f : A -> B) (y : B) : U =
  (x : A) * Path B y (f x)
isEquiv (A B : U) (f : A -> B) : U = (y : B) -> isContr (fiber A B f y)
equiv (A B : U) : U = (f : A -> B) * isEquiv A B f
idEquiv (A : U) : equiv A A =
  ((\(x : A) -> x), (\(y : A) ->
    ((y, <i> y), (\(zeq : (z : A) * Path A y z) ->
      (<j> (zeq.2 @ j, <k> zeq.2 @ j /\ k))))))
equivToPath (A B : U) (equiv : equiv B A) : Path U A B =
 <i>
  let
   X : U = Glue A [(i=0) -> (A, idEquiv A), (i=1) -> (B, equiv)]
  in
  X

-- sigmas
Sigma (A : U) (B : A -> U) : U = (a : A) * (B a)

SigmaPath (A : U) (B : A -> U) (x y : Sigma A B) : U
 = (p : Path A x.1 y.1) * (PathP (<j> (B (p @ j))) x.2 y.2)

PEquivalent (A B : U) : U = (_ : (A -> B)) * (B -> A)

pathToSigmaPath (A : U) (B : A -> U) (x y : Sigma A B)
 (p : Path (Sigma A B) x y) : SigmaPath A B x y =
 ((<i> (p @ i).1), <i> (p @ i).2)

sigmaPathToPath (A : U) (B : A -> U) (x y : Sigma A B)
 (p : SigmaPath A B x y) : Path (Sigma A B) x y =
 <i> (p.1 @ i, p.2 @ i)

data bool = false | true

caseBool (A : U) (f t : A) : bool -> A = split
 false -> f
 true  -> t

not : bool -> bool = split
 false -> true
 true -> false

notnotId : (x : bool) -> Path bool (not (not x)) x
 = split
  false -> <i> false
  true -> <i> true

prop (A : U) : U = (x y : A) -> Path A x y
prop2 (A : U) : U = (x y : A) -> isContr (Path A x y)

set (A : U) : U = (a b : A) -> prop (Path A a b)

set' (A B : U) (P : Path U A B) : U = (a : A) (b : B) -> prop (PathP P a b)

propSet (A : U) (h : prop A) : set A =
 \(a b : A) (p q : Path A a b) ->
   <j i> comp (<k>A) a [ (i=0) -> h a a
                       , (i=1) -> h a b
                       , (j=0) -> h a (p @ i)
                       , (j=1) -> h a (q @ i)]

simplerBleargh (A : U) : prop A -> (x y : A) -> prop (Path A x y) = 
  \(p : prop A) (x y : A) ->
    \(q : Path A x y) (r : Path A x y) ->
      <i j>
      comp (<k> A) (p x y @ j)
      [ (i = 0) -> <k> p (p x y @ j) (q @ j) @ k,
        (i = 1) -> <k> p (p x y @ j) (r @ j) @ k,
	(j = 0) -> p x x,
	(j = 1) -> p y y ]

wewekjh (A : U) (p : prop A) (a b c d : A) (q : Path A a b) (r : Path A c d) :
  PathP (<i> Path A (p a c @ i) (p b d @ i)) q r
  = <j i> p (q @ i) (r @ i) @ j


bleargh (A : U) : prop A -> prop2 A =
  \(p : prop A) (x y : A) ->
    (p x y,\(q : Path A x y) ->
      simplerBleargh A p x y (p x y) q)

data TruncationLevel =
  minus2 | suc (n : TruncationLevel)

isNType : TruncationLevel -> (X : U) -> U = split
  minus2 -> isContr
  suc n -> \(X : U) -> (x y : X) -> isNType n (Path X x y)


--         u
--    a0 -----> a1
--    |         |
-- r0 |         | r1
--    |         |
--    V         V
--    b0 -----> b1
--         v
Square (A : U) (a0 a1 b0 b1 : A)
               (u : Path A a0 a1) (v : Path A b0 b1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) : U
  = PathP (<i> (PathP (<j> A) (u @ i) (v @ i))) r0 r1


compose (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c =
  <i> comp (<_> A) b [(i=0) -> <j> p @ -j, (i=1) -> q]

refl2 (A : U) (a b : A) (p : Path A a b) : Path A a a =
  compose A a b a p (<i> p @ -i)


refl2_is_refl (A : U) (a b : A) (p : Path A a b) : Path (Path A a a) (refl2 A a b p) (<_> a) =
  <i> <j> comp (<_> A) b
    [(i=1) -> <k> p @ -k
    ,(j=0) -> <k> p @ -k
    ,(j=1) -> <k> p @ -k
    ]

compHeteroEqualsOriginal (A : U) (a0 a1 b0 b1 : A)
               (u : Path A a0 a1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) :
	       let v : Path A b0 b1 = <i> comp (<_> A) (u @ i) [(i=1) -> r1, (i=0) -> r0] in
	       PathP (<i> Path A (r0 @ i) (r1 @ i)) u v
	       =
	       <i j> comp (<_> A) (u @ j)
	        [ (i=0) -> <k> u @ j
		, (j=0) -> <k> r0 @ i /\ k
		, (j=1) -> <k> r1 @ i /\ k
		]

setSquare (A : U) (aSet : set A)
               (a0 b0 a1 b1 : A)
               (u : Path A a0 b0) (v : Path A a1 b1)
               (r0 : Path A a0 a1) (r1 : Path A b0 b1)
	       : Square A a0 b0 a1 b1 u v r0 r1 =
 let r1' : Path A b0 b1 = <i> comp (<_> A) (r0 @ i) [(i=1) -> v, (i=0) -> u] in
 let
  facej0 : Square A a0 b0 b0 b0 u (<_> b0) u (<_> b0) =
   <i k> u @ i \/ k
 in
 let
  facei0 : Square A b0 a0 b1 a1 (<i> u @ -i) (<i> v @ -i) r1' r0 =
   <i> compHeteroEqualsOriginal A a0 a1 b0 b1 r0 u v @ -i
 in
 <i> <j> comp (<_> A) (aSet b0 b1 r1' r1 @ i @ j)
   [ (j=0) -> <k> facej0 @ -k @ i
   , (i=1) -> <_> r1 @ j
   , (j=1) -> <k> v @ i \/ -k
   , (i=0) -> <k> facei0 @ k @ j
   ]

setSquare' (A : U) (aSet : set A)
               (a0 a1 b0 b1 : A)
               (u : Path A a0 a1) (v : Path A b0 b1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) : Square A a0 b0 a1 b1 r0 r1 u v
 =
  <i j> comp (<_> A) (aSet b0 b1 (
    <i> comp (<j> A) (u @ i) [
      (i = 0) -> <j> r0 @ j,
      (i = 1) -> <j> r1 @ j ])
      v @ i @ j)
      [ (i = 0) ->
        <k> comp (<_> A) (u @ j)
	  [ (j = 0) -> <l> r0 @ (-k /\ l)
	  , (j = 1) -> <l> r1 @ (-k /\ l)
	  , (k = 1) -> <l> u @ j ]
      , (i = 1) -> <k> v @ j
      , (j = 0) -> <k> r0 @ (i \/ -k)
      , (j = 1) -> <k> r1 @ (i \/ -k)
      ]

setFiberPath (A B : U) (bSet : set B) (f : A -> B) (y : B) (f1 f2 : fiber A B f y) (p : Path A f1.1 f2.1) : Path (fiber A B f y) f1 f2 =
 let
  f1eqf2 : PathP (<i> Path B y (f (p @ i))) f1.2 f2.2 =
    setSquare B bSet y y (f f1.1) (f f2.1) (<_> y) (<i> f (p @ i)) f1.2 f2.2
 in
 <i> (p @ i, f1eqf2 @ i)


isoEquiv (A B : U) (bSet : set B) (aSet : set A) (F : A -> B) (G : B -> A)
 (dir1 : (x : A) -> Path A (G (F x)) x)
 (dir2 : (y : B) -> Path B (F (G y)) y)
 : equiv A B
 =
  let
   fIsEquiv : isEquiv A B F =
    \(y : B) ->
      let pt : fiber A B F y = (G y, <i> dir2 y @ -i) in
      let
       lemma (fib : fiber A B F y) : Path (fiber A B F y) pt fib =
        (
	 let
	  x : Path A pt.1 fib.1 =
	   <i> comp (<_> A) (dir1 fib.1 @ i)
	   [(i=0)-> <j> G (fib.2 @ -j)
	   ,(i=1)-> <_> fib.1
	   ]
	 in
	 setFiberPath A B bSet F y pt fib x)
      in
      (pt, lemma)
  in
  (F, fIsEquiv)

notInj : (x : bool) -> Path bool (not (not x)) x
 =
 split
  false -> <_> false
  true -> <_> true

data Bot =

Not (A : U) : U = A -> Bot

botElim (A : U) : Bot -> A = split {}

data Dec (A : U) =
  no (nx : Not A) | yes (x : A)

boolToU : bool -> U = split
  false -> Bot
  true -> Unit

notFalseEqTrue : Not (Path bool false true) =
  \(p : (Path bool false true)) ->
    comp (<j> boolToU (p @ -j)) tt []

decEq : (a b : bool) -> Dec (Path bool a b) = split
  false -> deceqfalse
   where
     deceqfalse : (b : bool) -> Dec (Path bool false b) = split
       false -> yes (<_> false)
       true -> no notFalseEqTrue
  true -> deceqtrue
   where
     deceqtrue : (b : bool) -> Dec (Path bool true b) = split
       false -> no (\(p : Path bool true false) -> notFalseEqTrue (<i> p @ -i))
       true -> yes (<_> true)

DecEq (A : U) : U = (x y : A) -> Dec (Path A x y)

toNotNot (A : U) (x : A) : Not (Not A) = \(absurd : Not A) -> absurd x

extract (A : U) (a b : A) (p : Path A a b)
  : (dec : Dec (Path A a b)) -> Path A a b  =
     split
      no absurd -> botElim (Path A a b) (absurd p)
      yes q -> q

decEqYes (A : U) (decEq : DecEq A) (a b : A) (p : Path A a b) : Path A a b =
  extract A a b p (decEq a b)

extractSame (A : U) (a b : A) (p q : Path A a b)
  : (decEq : Dec (Path A a b)) -> Path (Path A a b)
   (extract A a b p decEq)
   (extract A a b q decEq)
   = split
   no absurd -> botElim (PathP (<!0> PathP (<!0> A) a b) (botElim (PathP (<!0> A) a b) (absurd p)) (botElim (PathP (<!0> A) a b) (absurd q))) (absurd p)
   yes x -> <_> x

decEqYesSame (A : U) (decEq : DecEq A) (a b : A) (p q : Path A a b) :
  Path (Path A a b) (decEqYes A decEq a b p) (decEqYes A decEq a b q) =
    extractSame A a b p q (decEq a b)

decEqImpliesSet (A : U) (decEq : DecEq A) : set A =
  \(a b : A) (p : Path A a b) (q : Path A a b) ->
    let
     eqb : Path A a b = decEqYes A decEq a b p
     aeqa : Path A a a = decEqYes A decEq a a (<_> a)
     beqb : Path A b b = decEqYes A decEq b b (<_> b)
     aeqaWeird : Path A a a = decEqYes A decEq a a (<j> comp (<_> A) (aeqa @ j)
       [(j=0) -> <k> a
       ,(j=1) -> <k> a
       ])
     weirdb (p : Path A a b) : Path A b b = (<j> comp (<_> A) (aeqa @ j)
       [(j=0) -> <k> eqb @ k
       ,(j=1) -> <k> p @ k
       ])
     beqbWeird (p : Path A a b) : Path A b b = decEqYes A decEq b b (weirdb p)
     blah (p : Path A a b) : Square A a b a b eqb p aeqaWeird (beqbWeird p) =
      <i> decEqYes A decEq (eqb @ i) (p @ i) (<j> comp (<_> A) (aeqa @ j)
       [(j=0) -> <k> eqb @ k /\ i
       ,(j=1) -> <k> p @ k /\ i
       ])
     next (p : Path A a b) : Square A a b a b eqb p aeqaWeird beqb =
       comp (<i> Square A a b a b eqb p aeqaWeird (decEqYesSame A decEq b b (weirdb p) (<_> b) @ i))
         (blah p)
         []
     result : Path (Path A a b) p q =
       <i j> comp (<_> A) (eqb @ j)
         [ (i=0) -> <k> next p @ j @ k
	 , (i=1) -> <k> next q @ j @ k
	 , (j=0) -> <k> aeqaWeird @ k
	 , (j=1) -> <k> beqb @ k
	 ]
    in
    result

boolSet : set bool = decEqImpliesSet bool decEq

notEquiv : equiv bool bool =
  isoEquiv bool bool boolSet boolSet not not notInj notInj
